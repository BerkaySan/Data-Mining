{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7512e08a",
   "metadata": {},
   "source": [
    "# 1. Ödev\n",
    "\n",
    "Bu ödevde herhangi bir şekilde varolan sofistike kütüphaneler kullanılamaz. Sadece rastgele sayı üretmek için kütüphane kullanabilirsiniz. Dokümanları vektörize etmek, uzaklık hesapları yapmak vs. gibi her şey için gereken kodu kendiniz yazmalısınız.\n",
    "\n",
    "Önemli not: ChatGpt'ye ben de kod yazdırabiliyorum :) ChatGPT'den alınan cevaplar kopya muamelesi görecektir.\n",
    "\n",
    "Ödeviniz Python 3 ile implement ediniz"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9870496b",
   "metadata": {},
   "source": [
    "**Soru 1** Bu soruda locality sensitive hashing (LSH) metodu yazacaksınız. Metodun çağrımı şu şekildedir: lsh(klasor_adi, k, b, r, similarity_threshold). \n",
    "- klasor_adi indeksin kurulacağı dosyaları tutan klasörün adresidir. Klasörün içinde birçok txt dosyası var olduğunu varsayabilirsiniz.\n",
    "- k 'k-shingle'in k değeridir. \n",
    "- b band sayısının değeridir.\n",
    "- r her banddaki satır (row) sayısıdır. \n",
    "\n",
    "Verilen  klasördeki dosyaları okuyarak LSH sistemi kurun. Bunun için her kelime bir token olacaktır. Öncelikle her kelime küçük harflere çevrilmeli ve noktalama işaretleri çıkarılmalı. Eğer k = 2 ise, “Ali okula gitti.” cümlesindeki ‘shingle’lar “ali okula” ve “okula gitti” olmalı. \n",
    "\n",
    "MinHash imzaları için 10 tane hash fonksiyonu kullanınız. \n",
    "\n",
    "Not: Sorunun cevabını kontrol ederken ben size verilen dosyalar ile aynı formatta olan farklı dosyalar kullanacağım.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7be594d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np # for linear algebra\n",
    "import pandas as pd # for dataframes\n",
    "import os # for path operations\n",
    "import string # for punctuation\n",
    "from tqdm.notebook import tqdm # progress bar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a8ba673b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def preprocess_text(text):\n",
    "    text = text.lower()\n",
    "    text = text.translate(str.maketrans('', '', string.punctuation))\n",
    "    text = text.strip()\n",
    "    return text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cb75222c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def shingle(text, k, split_term=' '):\n",
    "    #split the text into words\n",
    "    words = text.split(split_term)\n",
    "    #create a numpy list of shingles\n",
    "    shingles = np.array([])\n",
    "    #for each word in the text\n",
    "    for i in range(len(words)-k+1):\n",
    "        #create a shingle\n",
    "        shingle = words[i]\n",
    "        #for each word in the shingle\n",
    "        for j in range(1,k):\n",
    "            #add the word to the shingle\n",
    "            shingle += ' ' + words[i+j]\n",
    "        #add the shingle to the list\n",
    "        shingles = np.append(shingles, shingle)\n",
    "\n",
    "    return shingles\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "16c34f62",
   "metadata": {},
   "outputs": [],
   "source": [
    "def one_hot_vector_shingle(all_shingle, shingle):\n",
    "    #create a list of zeros\n",
    "    one_hot_vector = np.zeros(len(all_shingle))\n",
    "    #for each shingle in the list of all shingles\n",
    "    for i in range(len(all_shingle)):\n",
    "        #if the shingle is in the shingle\n",
    "        if all_shingle[i] in shingle:\n",
    "            #set the value to 1\n",
    "            one_hot_vector[i] = 1\n",
    "    #return the one hot vector\n",
    "    return one_hot_vector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e7bc44dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#dataframe to shingle matrix\n",
    "def shingle_matrix_df(all_shingle, document_numbers ,one_hot_matrix):\n",
    "    #create a dataframe\n",
    "    shingle_matrix_df = pd.DataFrame(data=one_hot_matrix, index=all_shingle, columns=document_numbers)\n",
    "    #return the dataframe\n",
    "    return shingle_matrix_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5727288f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def min_hashing(shingle_df, hash_functions_):\n",
    "    index = 0\n",
    "\n",
    "    signatures_matrix = np.ones((len(hash_functions_), len(shingle_df.columns)))\n",
    "    signatures_matrix = signatures_matrix * np.inf\n",
    "    for i in tqdm(range(len(shingle_df)), desc='min hashing'):\n",
    "        hash_values = []\n",
    "        for j in range(len(hash_functions_)):\n",
    "            hash_values.append(hash_functions_[j](i, prime=len(shingle_df)))         \n",
    "        for k in range(len(shingle_df.columns)):\n",
    "            if shingle_df.iloc[i,k] == 1:\n",
    "                for l in range(len(hash_values)):\n",
    "                    if hash_values[l] < signatures_matrix[l,k]:\n",
    "                        signatures_matrix[l,k] = hash_values[l]\n",
    "    #convert all to int \n",
    "    signatures_matrix = signatures_matrix.astype(int)\n",
    "    return signatures_matrix\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fe3492ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Hash function 1\n",
    "def hash_function_1(values,mod):\n",
    "    return hash(tuple(values)) % mod\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "44e145cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "def hash_function_1_minh(x, a=387, b=92839, prime=924541):\n",
    "    return (a * x + b) % prime\n",
    "\n",
    "def hash_function_2_minh(x, a=7283, b=23987, prime=924541):\n",
    "    return (a * x + b) % prime\n",
    "\n",
    "def hash_function_3_minh(x, a=93823, b=7382, prime=924541):\n",
    "    return (a * x + b) % prime\n",
    "\n",
    "def hash_function_4_minh(x, a=19373, b=73987, prime=924541):\n",
    "    return (a * x + b) % prime\n",
    "\n",
    "def hash_function_5_minh(x, a=2309, b=84967, prime=924541):\n",
    "    return (a * x + b) % prime\n",
    "\n",
    "def hash_function_6_minh(x, a=9103, b=84743, prime=924541):\n",
    "    return (a * x + b) % prime\n",
    "\n",
    "def hash_function_7_minh(x, a=73983, b=1982, prime=924541):\n",
    "    return (a * x + b) % prime\n",
    "\n",
    "def hash_function_8_minh(x, a=109, b=7381, prime=924541):\n",
    "    return (a * x + b) % prime\n",
    "\n",
    "def hash_function_9_minh(x, a=28411, b=983, prime=924541):\n",
    "    return (a * x + b) % prime\n",
    "\n",
    "def hash_function_10_minh(x, a=39203, b=849, prime=924541):\n",
    "    return (a * x + b) % prime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c503f9d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "def lsh_prev(signatures_matrix, hash_function, b, r):\n",
    "    def hash_band(band):\n",
    "        return hash_function(tuple(band), mod=signatures_matrix.shape[0])\n",
    "\n",
    "    similar_pairs = []\n",
    "\n",
    "    num_docs = signatures_matrix.shape[1]\n",
    "\n",
    "    # Divide signature matrix into bands\n",
    "    bands = [signatures_matrix[i:i+r] for i in tqdm(range(0, signatures_matrix.shape[0], r), desc='dividing into bands')]\n",
    "\n",
    "    # Hash each band and group documents with the same hash value\n",
    "    for band_idx in tqdm(range(len(bands)), desc='hashing bands'):\n",
    "        band = bands[band_idx]\n",
    "        band_hash = np.apply_along_axis(hash_band, 0, band)\n",
    "        # print(band)\n",
    "        # print(band_hash)\n",
    "        # Create a dictionary to store documents in the same bucket\n",
    "        bucket_dict = {}\n",
    "\n",
    "        for doc_idx in range(num_docs):\n",
    "            hash_value = band_hash[doc_idx]\n",
    "            if hash_value in bucket_dict:\n",
    "                bucket_dict[hash_value].append(doc_idx)\n",
    "            else:\n",
    "                bucket_dict[hash_value] = [doc_idx]\n",
    "        # print(bucket_dict)\n",
    "        # Find similar pairs within each bucket\n",
    "        for bucket in bucket_dict.values():\n",
    "            if len(bucket) > 1:\n",
    "                for i in range(len(bucket)):\n",
    "                    for j in range(i + 1, len(bucket)):\n",
    "                        similar_pairs.append((bucket[i], bucket[j]))\n",
    "        # print(\"deneme\")\n",
    "    return similar_pairs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d3e779e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "def jaccard_similarity(x, y):\n",
    "    \n",
    "    set1 = set(np.where(x == 1)[0])\n",
    "    set2 = set(np.where(y == 1)[0])\n",
    "\n",
    "    return len(set1.intersection(set2)) / len(set1.union(set2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "bf1f4cd0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "from tqdm.notebook import tqdm\n",
    "def lsh(klasor_adi, k, b, r, similarity_threshold = 0, input_file = None):\n",
    "    #check if input file is given\n",
    "    if input_file:\n",
    "        files = os.listdir(klasor_adi)\n",
    "        documents = []\n",
    "        document_names = []\n",
    "        #first read the input file\n",
    "        try:\n",
    "            with open(input_file, 'r', encoding='utf-8') as f:\n",
    "                document = f.read()\n",
    "                document = preprocess_text(document)\n",
    "                documents.append(document)\n",
    "                document_names.append(input_file)\n",
    "        except:\n",
    "            print(\"Error opening or reading input file: \", input_file)\n",
    "            sys.exit()    \n",
    "        # Dosyalardan metinleri oku ve ön işleme yap\n",
    "        for file in tqdm(files,desc=\"Reading files\"):\n",
    "            file_path = os.path.join(klasor_adi, file)\n",
    "            try:\n",
    "                with open(file_path, 'r', encoding='utf-8') as f:\n",
    "                    document = f.read()\n",
    "                    document = preprocess_text(document)\n",
    "                    documents.append(document)\n",
    "                    document_names.append(file)\n",
    "            except:\n",
    "                print(\"Error opening or reading input file: \", file_path)\n",
    "        #calcaulate shingles\n",
    "        shingles = np.array([])\n",
    "        for i in tqdm(range(len(documents)), desc=\"Calculating shingles\"):\n",
    "            shingles = np.unique(np.concatenate((shingles, shingle(documents[i], k))))\n",
    "        #calculate each shingle one hot vector\n",
    "        shingle_one_hot_vectors = np.zeros((len(documents), len(shingles)))\n",
    "        for i in tqdm(range(len(documents)),desc=\"Calculating one hot vectors\"):\n",
    "            shingle_one_hot_vectors[i] = one_hot_vector_shingle(shingles, shingle(documents[i], k))\n",
    "        # print(shingle_one_hot_vectors)\n",
    "        #shingle matrix\n",
    "        shingle_matrix = shingle_one_hot_vectors.transpose()\n",
    "    \n",
    "        #shingle matrix to dataframe\n",
    "        shingle_matrix_df = pd.DataFrame(data=shingle_matrix, index=shingles, columns=document_names)\n",
    "        hash_functions = [hash_function_1_minh, hash_function_2_minh, hash_function_3_minh, hash_function_4_minh, hash_function_5_minh, hash_function_6_minh, hash_function_7_minh, hash_function_8_minh, hash_function_9_minh, hash_function_10_minh]\n",
    "        #min hashing\n",
    "        signatures_df = min_hashing(shingle_matrix_df, hash_functions)\n",
    "\n",
    "        def hash_band(band):\n",
    "            return hash_function_1(tuple(band), mod=signatures_df.shape[0])\n",
    "\n",
    "        similar_pairs = []\n",
    "\n",
    "        num_docs = signatures_df.shape[1]\n",
    "\n",
    "        # Divide signature matrix into bands\n",
    "        bands = [signatures_df[i:i+r] for i in tqdm(range(0, signatures_df.shape[0], r), desc='dividing into bands')]\n",
    "\n",
    "        # Hash each band and group documents with the same hash value\n",
    "        for band_idx in tqdm(range(len(bands)), desc='hashing bands'):\n",
    "            band = bands[band_idx]\n",
    "            band_hash = np.apply_along_axis(hash_band, 0, band)\n",
    "            # print(band)\n",
    "            # print(band_hash)\n",
    "            # Create a dictionary to store documents in the same bucket\n",
    "            bucket_dict = {}\n",
    "\n",
    "            for doc_idx in range(num_docs):\n",
    "                hash_value = band_hash[doc_idx]\n",
    "                if hash_value in bucket_dict:\n",
    "                    bucket_dict[hash_value].append(doc_idx)\n",
    "                else:\n",
    "                    bucket_dict[hash_value] = [doc_idx]\n",
    "            \n",
    "            # Find similar pairs within first document\n",
    "            for bucket in bucket_dict.values():\n",
    "                if len(bucket) > 1:\n",
    "                    for i in range(len(bucket)):\n",
    "                        for j in range(i + 1, len(bucket)):\n",
    "                            similar_pairs.append((bucket[i], bucket[j]))\n",
    "        #get only pairs containing the first document\n",
    "        similar_pairs = [pair for pair in similar_pairs if (pair[0] == 0 or pair[1] == 0)]\n",
    "\n",
    "        def make_array_unique(arr):\n",
    "            # Convert the array to a set of tuples to remove duplicates\n",
    "            unique_set = set(map(tuple, arr))\n",
    "    \n",
    "            # Convert the set of tuples back to a NumPy array\n",
    "            unique_array = np.array(list(unique_set))\n",
    "    \n",
    "            return unique_array\n",
    "    \n",
    "        # Remove duplicates from the array\n",
    "        similar_pairs = make_array_unique(similar_pairs)\n",
    "        #print(similar_pairs)\n",
    "        #similar_pairs = np.unique(similar_pairs) \n",
    "         \n",
    "\n",
    "        #using similarit threshold find similar pairs\n",
    "        similar_pairs = [(pair,jaccard_similarity(shingle_matrix_df.iloc[:,pair[0]], shingle_matrix_df.iloc[:,pair[1]])) for pair in similar_pairs if jaccard_similarity(shingle_matrix_df.iloc[:,pair[0]], shingle_matrix_df.iloc[:,pair[1]]) >= similarity_threshold]\n",
    "\n",
    "        \n",
    "        column_names = shingle_matrix_df.columns\n",
    "\n",
    "        similar_pairs = [(column_names[pair[0][0]], column_names[pair[0][1]], pair[1]) for pair in similar_pairs]\n",
    "\n",
    "        \n",
    "\n",
    "        #sort pairs by similarity\n",
    "        similar_pairs = sorted(similar_pairs, key=lambda x: x[2], reverse=True)\n",
    "        return similar_pairs\n",
    "\n",
    "    else:        \n",
    "        files = os.listdir(klasor_adi)\n",
    "        documents = []\n",
    "        document_names = []\n",
    "\n",
    "        #lsh_hash_functions=[hash_function_1,hash_function_2, hash_function_3, hash_function_4, hash_function_5, hash_function_6, hash_function_7, hash_function_8, hash_function_9, hash_function_10, hash_function_11, hash_function_12, hash_function_13, hash_function_14, hash_function_15, hash_function_16, hash_function_17, hash_function_18, hash_function_19, hash_function_20 ]\n",
    "\n",
    "        # Dosyalardan metinleri oku ve ön işleme yap\n",
    "        for file in tqdm(files,desc=\"Reading files\"):\n",
    "            file_path = os.path.join(klasor_adi, file)\n",
    "            try:\n",
    "                with open(file_path, 'r', encoding='utf-8') as f:\n",
    "                    document = f.read()\n",
    "                    document = preprocess_text(document)\n",
    "                    documents.append(document)\n",
    "                    document_names.append(file)\n",
    "            except:\n",
    "                print(\"Error opening or reading input file: \", file_path)\n",
    "\n",
    "        #calcaulate shingles\n",
    "        shingles = np.array([])\n",
    "        for i in tqdm(range(len(documents)), desc=\"Calculating shingles\"):\n",
    "            shingles = np.unique(np.concatenate((shingles, shingle(documents[i], k))))\n",
    "        #calculate each shingle one hot vector\n",
    "        shingle_one_hot_vectors = np.zeros((len(documents), len(shingles)))\n",
    "        for i in tqdm(range(len(documents)),desc=\"Calculating one hot vectors\"):\n",
    "            shingle_one_hot_vectors[i] = one_hot_vector_shingle(shingles, shingle(documents[i], k))\n",
    "        # print(shingle_one_hot_vectors)\n",
    "        #shingle matrix\n",
    "        shingle_matrix = shingle_one_hot_vectors.transpose()\n",
    "    \n",
    "        #shingle matrix to dataframe\n",
    "        shingle_matrix_df = pd.DataFrame(data=shingle_matrix, index=shingles, columns=document_names)\n",
    "        hash_functions = [hash_function_1_minh, hash_function_2_minh, hash_function_3_minh, hash_function_4_minh, hash_function_5_minh, hash_function_6_minh, hash_function_7_minh, hash_function_8_minh, hash_function_9_minh, hash_function_10_minh]\n",
    "        #min hashing\n",
    "        signatures_df = min_hashing(shingle_matrix_df, hash_functions)\n",
    "\n",
    "        #get random hash functions from lsh_hash_functions with b times\n",
    "        # hash_functions = random.sample(lsh_hash_functions, b)\n",
    "\n",
    "        #lsh\n",
    "        similar_pairs = lsh_prev(signatures_df, hash_function_1, b, r)\n",
    "\n",
    "        #using similarit threshold find similar pairs\n",
    "        similar_pairs = [(pair,jaccard_similarity(shingle_matrix_df.iloc[:,pair[0]], shingle_matrix_df.iloc[:,pair[1]])) for pair in similar_pairs if jaccard_similarity(shingle_matrix_df.iloc[:,pair[0]], shingle_matrix_df.iloc[:,pair[1]]) >= similarity_threshold]\n",
    "    \n",
    "        def make_array_unique(arr):\n",
    "            # Convert the array to a set of tuples to remove duplicates\n",
    "            unique_set = set(map(tuple, arr))\n",
    "    \n",
    "            # Convert the set of tuples back to a NumPy array\n",
    "            unique_array = np.array(list(unique_set))\n",
    "    \n",
    "            return unique_array\n",
    "    \n",
    "        # Remove duplicates from the array\n",
    "        similar_pairs = make_array_unique(similar_pairs)\n",
    "        column_names = shingle_matrix_df.columns\n",
    "\n",
    "        similar_pairs = [(column_names[pair[0][0]], column_names[pair[0][1]], pair[1]) for pair in similar_pairs]\n",
    "  \n",
    "\n",
    "        return similar_pairs\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "48e4facd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "26b73fd3d9284abca04e318d7d8ed4f3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Reading files:   0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8d6177d2864e4d18a685613098c6d7b9",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Calculating shingles:   0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e85a305fccb445f5a0ef707e78d7ced2",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Calculating one hot vectors:   0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1e0701d8027c4ab38dc59155c4a79b6c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "min hashing:   0%|          | 0/10391 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "928a93b6058a4a3f974f105586a903d8",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "dividing into bands:   0%|          | 0/2 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3e08aed2f2e84a2180e0e5c67c011320",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "hashing bands:   0%|          | 0/2 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_12050/904978236.py:165: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n",
      "  unique_array = np.array(list(unique_set))\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[('1306.txt', '1502.txt', 0.16252390057361377),\n",
       " ('1821.txt', '1777.txt', 0.1218568665377176),\n",
       " ('1074.txt', '1486.txt', 0.10594795539033457)]"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lsh(\"docs/docs/\",2,5,5,0.1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d76617e8",
   "metadata": {},
   "source": [
    "**Soru 2)**  Önceki soruda hazırladığınız LSH indeksini kullanarak verilen bir dosyanın muhtemel benzerleri olan dosyaları ve o dokümanlar ile olan jaccard benzerliği sıralı bir şekilde ekrana yazdıran bir method yazınız.  En çok benzeyen dokümanlar ilk yazılmalı. Çıktının formatı aşağıdaki örnekteki gibi olmalı.  Örnekte sadece 2 dosya döndüğü varsayılmıştır.\n",
    "\n",
    "a.txt 0.7\n",
    "b.txt 0.65\n",
    "Toplam 2 dosya bulunmuştur.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "7664ccf7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cevabınız buraya yazınız. Eğer ihtiyaç duyarsanız metoda başka parametreler ekleyebilirsiniz\n",
    "def query(input_file, klasor_adi, k, b, r, similarity_threshold = 0):\n",
    "    similar_pairs = lsh(klasor_adi,k,b,r,input_file = input_file, similarity_threshold = similarity_threshold)\n",
    "    print(similar_pairs)\n",
    "    print(\"Toplamda \",len(similar_pairs),\" adet benzer dosya bulundu.\")\n",
    "    \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "a7c04411",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "fd38710243d04be08b0660a72e48d940",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Reading files:   0%|          | 0/8 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1c2996e7dd1b4ea2bc73bd629c0aa2ae",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Calculating shingles:   0%|          | 0/9 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "67ab043f5c144ebc933d46363138057c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Calculating one hot vectors:   0%|          | 0/9 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7ad194eca9a24e7ca01f279f50d388e2",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "min hashing:   0%|          | 0/1547 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0dfe2b0ef6fb4b27a9ca412c2313b2b0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "dividing into bands:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0acbc3dd04be4f62a88cb4c9e16a10b3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "hashing bands:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('sorgu.txt', '5555.txt', 1.0), ('sorgu.txt', '1001.txt', 0.025), ('sorgu.txt', '1003.txt', 0.023931623931623933), ('sorgu.txt', '1006.txt', 0.017241379310344827)]\n",
      "Toplamda  4  adet benzer dosya bulundu.\n"
     ]
    }
   ],
   "source": [
    "query(\"sorgu.txt\",\"data/\",2,5,2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "616ff9f2",
   "metadata": {},
   "source": [
    "**Soru 3)** Bu soruda ödev ile verilen  metin dosyalarını kullanarak LSH indeksi kurup farklı k, b, ve r değerlerinin sonuç üzerindeki etkisine bakacaksınız.\n",
    "Spesifik olarak yapacağınız şunlar.\n",
    "- Ödevde verilen docs klasöründeki dokümanları b=5, r=4 iken k=2,3,4 değerlerini kullanarak 3 farklı LSH indeksi kurunuz. Ardından ödevde verilen sorgu.txt dosyasını bu 3 ayrı indekste aratıp toplamda kaç doküman döndüğü gösteren bir 'bar chart' çiziniz. \n",
    "- k=3, r=4 iken b değerini 3,4,5 olarak değiştiriniz ve birinci şıktaki gibi toplamda kaç doküman döndüğü gösteren bir 'bar chart' çiziniz. \n",
    "- k=3, r=4 iken r değerini 3,4,5 olarak değiştiriniz ve birinci şıktaki gibi toplamda kaç doküman döndüğü gösteren bir 'bar chart' çiziniz.\n",
    "\n",
    "Not:  Bu soruda ikinci sorudaki metotta ufak bir değişikliğe gidip ekrana bir şey bastırmadan sadece  kaç doküman bulunduğunu dönen bir metot olarak tanımlayın. Bu yeni metodu aşağıda 3. soru için tanımlanan yerde yapın."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "64de3f37",
   "metadata": {},
   "outputs": [],
   "source": [
    "def query_2(input_file, klasor_adi, k, b, r, similarity_threshold = 0):\n",
    "    similar_pairs = lsh(klasor_adi,k,b,r,input_file = input_file, similarity_threshold = similarity_threshold)\n",
    "    return (len(similar_pairs))\n",
    "   \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "9a22fcf9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3fca9991e4ac4ffdbf16ec8f48626825",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Reading files:   0%|          | 0/8 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e18977712b2c4cdd9101b7b1c505f4be",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Calculating shingles:   0%|          | 0/9 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "82bda98f3c3548309598d476fe4c7e4b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Calculating one hot vectors:   0%|          | 0/9 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "cede0e08dda945609c54ce928d653a42",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "min hashing:   0%|          | 0/1547 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1c6d48ab75dd4916bc6294539444a5e9",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "dividing into bands:   0%|          | 0/3 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e00f75dd68d84e979e2698e1f83b4d6e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "hashing bands:   0%|          | 0/3 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "91f9666eff674c609a2c11e2515d9eda",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Reading files:   0%|          | 0/8 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "eebd002491a54bada03205795cce324e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Calculating shingles:   0%|          | 0/9 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8580863d09d440f48c761199da5c72d6",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Calculating one hot vectors:   0%|          | 0/9 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8e9d94847f694fd2acaa7b5269509d29",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "min hashing:   0%|          | 0/2090 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d8e1b983b28746e987fd1abe5eca94ee",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "dividing into bands:   0%|          | 0/3 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4497ac6c503141f2a0ac400ff578942d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "hashing bands:   0%|          | 0/3 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d6cd029f5754420fa826c1cac8077fc3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Reading files:   0%|          | 0/8 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4b78f83ad7f34cc48b25e5258c3f559f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Calculating shingles:   0%|          | 0/9 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b8a069bbafb347ee8822f15fb25c66be",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Calculating one hot vectors:   0%|          | 0/9 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d4591dff8c844508b00660c10c150e99",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "min hashing:   0%|          | 0/2433 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3db16eb9ccc7403b9f890d01bebab339",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "dividing into bands:   0%|          | 0/3 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d30e9955c46d4c3b9a92273f7def36bd",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "hashing bands:   0%|          | 0/3 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ecadb2d8db574a1db54eee596f7ef8d6",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Reading files:   0%|          | 0/8 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "64cd3932953e4b3a8e23be20faf11c51",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Calculating shingles:   0%|          | 0/9 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d6afbc51aa1c4f55b32d64ab8647faaa",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Calculating one hot vectors:   0%|          | 0/9 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4fe128cd622d4cf4af7616fbde0d3a7d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "min hashing:   0%|          | 0/2090 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0b04fe6805bd47c0a5646ba8dcba1d04",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "dividing into bands:   0%|          | 0/3 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ec48910ab76647d0a5f7978ffa676693",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "hashing bands:   0%|          | 0/3 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4c482d6869124f5cb2222d376a53425d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Reading files:   0%|          | 0/8 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "01273b21bca8413e9ac54c888a0576b1",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Calculating shingles:   0%|          | 0/9 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "17b2361b15624c4f974a4093f74a91f4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Calculating one hot vectors:   0%|          | 0/9 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2fc73896846943f1a530de47f78a611c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "min hashing:   0%|          | 0/2090 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "706de53d56194109aa247da3585a60b7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "dividing into bands:   0%|          | 0/3 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9adbc5b61d604d02825f642cdc551ac9",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "hashing bands:   0%|          | 0/3 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a0f72bf4e66b4ac68ba0b7fbdccec311",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Reading files:   0%|          | 0/8 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4369f23047034bbca3c1c66793576825",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Calculating shingles:   0%|          | 0/9 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "23d485db13154c12ab1a6f1d4b3e75e7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Calculating one hot vectors:   0%|          | 0/9 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "cc67fb8744524d31b229108133e0ee81",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "min hashing:   0%|          | 0/2090 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "36acf5d5d4ff44cda5ccc31ec30b9880",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "dividing into bands:   0%|          | 0/3 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9e160f7b556f4fc8b6066fbb6d939120",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "hashing bands:   0%|          | 0/3 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b4b629f8735c4f388c508ba0eeba0ac3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Reading files:   0%|          | 0/8 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ea5ee35d1b2c45349d1ea1acdcdbb0eb",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Calculating shingles:   0%|          | 0/9 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "79299f94661547a0b25da85d694f48c1",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Calculating one hot vectors:   0%|          | 0/9 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "616e44fea06b4705afc190bcfa00e854",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "min hashing:   0%|          | 0/2090 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1fa9b90007804b879e847474b9a8a3e4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "dividing into bands:   0%|          | 0/4 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4a80c85814624b5e9593837a31354c0a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "hashing bands:   0%|          | 0/4 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "bc6a4a234a214268bd18645465f6b7ce",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Reading files:   0%|          | 0/8 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "bb54c4df36de4cec9559503d4c0b7476",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Calculating shingles:   0%|          | 0/9 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "511accc0896d4696ab0111cb111e9d43",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Calculating one hot vectors:   0%|          | 0/9 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "965956af2bfd4e92a5eb5e82b3db6c41",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "min hashing:   0%|          | 0/2090 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "84cfe96f73b043a480dbdb2ae3a21ae1",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "dividing into bands:   0%|          | 0/3 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "52f809717fc3469bb57e7e378a507cbe",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "hashing bands:   0%|          | 0/3 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "cb8656b9b5154911a4391969b02f6dcf",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Reading files:   0%|          | 0/8 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "17ec6107871b444686643ca350a788f9",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Calculating shingles:   0%|          | 0/9 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "695fbe5fc7c94fa28d44fb646e841738",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Calculating one hot vectors:   0%|          | 0/9 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "70bfe569c2604ad18baf00487bc47e67",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "min hashing:   0%|          | 0/2090 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "86fd512484c042b59926330ed82a02fd",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "dividing into bands:   0%|          | 0/2 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "36c08551674e4dad8d6fd2a69c06868e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "hashing bands:   0%|          | 0/2 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 3. sorunun cevabı için ayrılan yer\n",
    "experiment_1 = []\n",
    "#b = 5, r =4 için k=2,3,4 için query fonksiyonu çağırıldı\n",
    "#k=2 için\n",
    "\n",
    "experiment_1.append(query_2(\"sorgu.txt\",\"data/\",2,5,4))\n",
    "#k=3 için\n",
    "\n",
    "experiment_1.append(query_2(\"sorgu.txt\",\"data/\",3,5,4))\n",
    "#k=4 için\n",
    "\n",
    "experiment_1.append(query_2(\"sorgu.txt\",\"data/\",4,5,4))\n",
    "\n",
    "experiment_2 = []\n",
    "#k=3, r=4 için b=3,4,5 için query_2 fonksiyonu çağırıldı\n",
    "#b=3 için\n",
    "experiment_2.append(query_2(\"sorgu.txt\",\"data/\",3,3,4))\n",
    "#b=4 için\n",
    "experiment_2.append(query_2(\"sorgu.txt\",\"data/\",3,4,4))\n",
    "#b=5 için\n",
    "experiment_2.append(query_2(\"sorgu.txt\",\"data/\",3,5,4))\n",
    "\n",
    "experiment_3 = []\n",
    "#k=3, b=4 için r=3,4,5 için query_2 fonksiyonu çağırıldı\n",
    "#r=3 için\n",
    "experiment_3.append(query_2(\"sorgu.txt\",\"data/\",3,4,3))\n",
    "#r=4 için\n",
    "experiment_3.append(query_2(\"sorgu.txt\",\"data/\",3,4,4))\n",
    "#r=5 için\n",
    "experiment_3.append(query_2(\"sorgu.txt\",\"data/\",3,4,5))\n",
    "\n",
    "#plot a bar chart for each experiment\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "#for experiment 1\n",
    "x = np.arange(3)\n",
    "width = 0.2\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "rects1 = ax.bar(x - width/2, experiment_1, width, label='experiment_1')\n",
    "ax.set_ylabel('Number of similar pairs')\n",
    "ax.set_title('Experiment 1')\n",
    "ax.set_xticks(x)\n",
    "ax.set_xticklabels(['k=2', 'k=3', 'k=4'])\n",
    "ax.legend()\n",
    "fig.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "#for experiment 2\n",
    "x = np.arange(3)\n",
    "width = 0.2\n",
    "fig, ax = plt.subplots()\n",
    "rects1 = ax.bar(x - width/2, experiment_2, width, label='experiment_2')\n",
    "ax.set_ylabel('Number of similar pairs')\n",
    "ax.set_title('Experiment 2')\n",
    "ax.set_xticks(x)\n",
    "ax.set_xticklabels(['b=3', 'b=4', 'b=5'])\n",
    "ax.legend()\n",
    "fig.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "#for experiment 3\n",
    "x = np.arange(3)\n",
    "width = 0.2\n",
    "fig, ax = plt.subplots()\n",
    "rects1 = ax.bar(x - width/2, experiment_3, width, label='experiment_3')\n",
    "ax.set_ylabel('Number of similar pairs')\n",
    "ax.set_title('Experiment 3')\n",
    "ax.set_xticks(x)\n",
    "ax.set_xticklabels(['r=3', 'r=4', 'r=5'])\n",
    "ax.legend()\n",
    "fig.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60664cf4",
   "metadata": {},
   "source": [
    "**Soru 4**\tBu soruda MeanShift algoritmasını implement edeceksiniz. Yazacağınız metot verilen klasördeki her dosyayı meanShift algoritmasına ve radius uzaklık parametresine göre kümeler ve çıktı olarak kümeleri print eder. Algoritma en başta klasör içindeki her dosya için bir ağırlık merkezi başlatır. Çıktısı şu formatta olmalıdır.\n",
    "\n",
    "Cluster-0: a,b,c\n",
    "\n",
    "Cluster-1: d,e,f \n",
    "\n",
    "...........\n",
    "\n",
    "Cluster-n: h\n",
    " \n",
    "Yukarıdaki örnekte a,b,c, vs. verilen klasördeki dosyaların isimleridir. Dokümanların vektörel gösterimi şöyle olmalıdır: Tüm dokümanlarda geçen en popüler 1000 kelimeyi bulun. Sonra her kelimenin varlığı/yokluğunu birer öznitelik olarak gösterin. Örneğin bir doküman “a b c d f” ise ve b, d ve s en popüler ‘kelimeler’ ise, bu dokümanın gösterimi [1,1,0] olmalıdır. Uzaklık için kosinüs uzaklığını kullanın.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "eeb385bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "def tokenize_document(document):\n",
    "    # Tokenize the document by splitting on whitespace\n",
    "    document = document.lower()\n",
    "    document = document.translate(str.maketrans('', '', string.punctuation))\n",
    "    document = document.strip()\n",
    "    return document.split()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "id": "3ba38916",
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_vocabulary(documents):\n",
    "    # Create a vocabulary of unique words from the documents\n",
    "    # get the frequency of each word in the vocabulary\n",
    "    vocabulary = {}\n",
    "    for document in documents:\n",
    "        for word in tokenize_document(document):\n",
    "            if word in vocabulary:\n",
    "                vocabulary[word] += 1\n",
    "            else:\n",
    "                vocabulary[word] = 1\n",
    "    #sort the vocabulary by frequency\n",
    "    #return the most 1000 frequent words\n",
    "    return sorted(vocabulary, key=vocabulary.get, reverse=True)[:1000]         \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "be85611c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_feature_vectors(documents, vocabulary):\n",
    "    # Create binary feature vectors for each document based on the presence or absence of words in the vocabulary\n",
    "    feature_vectors = []\n",
    "    for document in documents:\n",
    "        words = tokenize_document(document)\n",
    "        vector = [1 if word in words else 0 for word in vocabulary]\n",
    "        feature_vectors.append(vector)\n",
    "    return np.array(feature_vectors)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "b57c0921",
   "metadata": {},
   "outputs": [],
   "source": [
    "def cosine_similarity(vector1, vector2):\n",
    "    # Compute the cosine similarity between two vectors\n",
    "    dot_product = np.dot(vector1, vector2)\n",
    "    norm_product = np.linalg.norm(vector1) * np.linalg.norm(vector2)\n",
    "    similarity = dot_product / norm_product\n",
    "    return 1- similarity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 279,
   "id": "bf4faf6f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def meanShift(folder_name, radius, number_of_iterations=5):\n",
    "    files = []\n",
    "    file_names = []\n",
    "    \n",
    "    for filename in os.listdir(folder_name):\n",
    "        try:\n",
    "            with open(os.path.join(folder_name, filename), 'r', encoding='utf-8') as file:\n",
    "                files.append(file.read())\n",
    "                file_names.append(filename)\n",
    "        except:\n",
    "            print(\"Error opening or reading input file: \", filename)\n",
    "\n",
    "    \n",
    "    vocabulary = create_vocabulary(files)\n",
    "    feature_vectors = create_feature_vectors(files, vocabulary)\n",
    "    feature_vectors = feature_vectors.transpose()\n",
    "    feature_vectors_df = pd.DataFrame(data=feature_vectors, index=vocabulary, columns=file_names)\n",
    "\n",
    "    X = feature_vectors_df.values \n",
    "    n_samples, n_documents = X.shape\n",
    "    # Başlangıçta tüm noktaları rastgele bir merkeze atıyoruz\n",
    "    centroids = X.copy()\n",
    "    centroids = centroids.transpose()\n",
    "    X=X.transpose()\n",
    "        # Kümeleri depolamak için bir sözlük oluşturuyoruz\n",
    "    clusters = {}\n",
    "    # Algoritma konverjans kriterine ulaşana kadar iterasyon yapacak\n",
    "    count = 0\n",
    "    while True:\n",
    "        new_centroids = []\n",
    "        for i in range(len(centroids)):\n",
    "            # Merkezlere olan mesafeleri hesaplıyoruz\n",
    "            distances = [cosine_similarity(X[i], centroid) for centroid in centroids]\n",
    "            \n",
    "            # Yarıçap içindeki noktaları belirliyoruz\n",
    "            within_radius = [idx for idx, dist in enumerate(distances) if dist <= radius]\n",
    "            # Yarıçap içindeki noktaların ağırlık merkezini hesaplıyoruz\n",
    "            \n",
    "            new_centroid = np.mean(X[within_radius], axis=0)\n",
    "            new_centroids.append(new_centroid)\n",
    "            \n",
    "        #print(\"tolerans:\",np.allclose(centroids, new_centroids))\n",
    "        #if np.allclose(centroids, new_centroids, rtol=0.1):\n",
    "        #    break\n",
    "        if count == number_of_iterations:\n",
    "            break\n",
    "        count += 1\n",
    "        centroids = np.array(new_centroids)\n",
    " \n",
    "\n",
    "    #her bir dokümanı bir centroid ile karşılaştırıp en yakın olan centroidi o dokümanın centroidi olarak belirliyoruz\n",
    "    for i in range(n_documents):\n",
    "        distances = [cosine_similarity(X[i], centroid) for centroid in centroids]\n",
    "        cluster_label = f\"Cluster-{np.argmin(distances)}\"\n",
    "        if cluster_label in clusters:\n",
    "            clusters[cluster_label].append(file_names[i])\n",
    "        else:\n",
    "            clusters[cluster_label] = [file_names[i]]\n",
    "    return clusters\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de2c443e",
   "metadata": {},
   "source": [
    "**Soru 5** 4. soruda tanımladığınız metodu kullanarak ödev ile beraber verilen docs klasöründeki dosyaları cluster ediniz. Bunun için radius değerinini 0.1’den başlayıp 0.05 arttırarak 0.95’e kadar tüm değerlerde deneyin ve elde ettiğiniz cluster sayısını gösteriniz. Bunun için x ekseninde Radius değeri, y ekseninde cluster sayısı olan bir figür oluşturunuz."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 280,
   "id": "ca77b06e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "25058fc89774430ea057c2f101ec65a7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/17 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error opening or reading input file:  1665.txt\n",
      "Error opening or reading input file:  1666.txt\n",
      "Error opening or reading input file:  1417.txt\n",
      "Error opening or reading input file:  1248.txt\n",
      "Error opening or reading input file:  1817.txt\n",
      "Error opening or reading input file:  1416.txt\n",
      "Error opening or reading input file:  1990.txt\n",
      "Error opening or reading input file:  1418.txt\n",
      "Error opening or reading input file:  1928.txt\n",
      "Error opening or reading input file:  1665.txt\n",
      "Error opening or reading input file:  1666.txt\n",
      "Error opening or reading input file:  1417.txt\n",
      "Error opening or reading input file:  1248.txt\n",
      "Error opening or reading input file:  1817.txt\n",
      "Error opening or reading input file:  1416.txt\n",
      "Error opening or reading input file:  1990.txt\n",
      "Error opening or reading input file:  1418.txt\n",
      "Error opening or reading input file:  1928.txt\n",
      "Error opening or reading input file:  1665.txt\n",
      "Error opening or reading input file:  1666.txt\n",
      "Error opening or reading input file:  1417.txt\n",
      "Error opening or reading input file:  1248.txt\n",
      "Error opening or reading input file:  1817.txt\n",
      "Error opening or reading input file:  1416.txt\n",
      "Error opening or reading input file:  1990.txt\n",
      "Error opening or reading input file:  1418.txt\n",
      "Error opening or reading input file:  1928.txt\n",
      "Error opening or reading input file:  1665.txt\n",
      "Error opening or reading input file:  1666.txt\n",
      "Error opening or reading input file:  1417.txt\n",
      "Error opening or reading input file:  1248.txt\n",
      "Error opening or reading input file:  1817.txt\n",
      "Error opening or reading input file:  1416.txt\n",
      "Error opening or reading input file:  1990.txt\n",
      "Error opening or reading input file:  1418.txt\n",
      "Error opening or reading input file:  1928.txt\n",
      "Error opening or reading input file:  1665.txt\n",
      "Error opening or reading input file:  1666.txt\n",
      "Error opening or reading input file:  1417.txt\n",
      "Error opening or reading input file:  1248.txt\n",
      "Error opening or reading input file:  1817.txt\n",
      "Error opening or reading input file:  1416.txt\n",
      "Error opening or reading input file:  1990.txt\n",
      "Error opening or reading input file:  1418.txt\n",
      "Error opening or reading input file:  1928.txt\n",
      "Error opening or reading input file:  1665.txt\n",
      "Error opening or reading input file:  1666.txt\n",
      "Error opening or reading input file:  1417.txt\n",
      "Error opening or reading input file:  1248.txt\n",
      "Error opening or reading input file:  1817.txt\n",
      "Error opening or reading input file:  1416.txt\n",
      "Error opening or reading input file:  1990.txt\n",
      "Error opening or reading input file:  1418.txt\n",
      "Error opening or reading input file:  1928.txt\n",
      "Error opening or reading input file:  1665.txt\n",
      "Error opening or reading input file:  1666.txt\n",
      "Error opening or reading input file:  1417.txt\n",
      "Error opening or reading input file:  1248.txt\n",
      "Error opening or reading input file:  1817.txt\n",
      "Error opening or reading input file:  1416.txt\n",
      "Error opening or reading input file:  1990.txt\n",
      "Error opening or reading input file:  1418.txt\n",
      "Error opening or reading input file:  1928.txt\n",
      "Error opening or reading input file:  1665.txt\n",
      "Error opening or reading input file:  1666.txt\n",
      "Error opening or reading input file:  1417.txt\n",
      "Error opening or reading input file:  1248.txt\n",
      "Error opening or reading input file:  1817.txt\n",
      "Error opening or reading input file:  1416.txt\n",
      "Error opening or reading input file:  1990.txt\n",
      "Error opening or reading input file:  1418.txt\n",
      "Error opening or reading input file:  1928.txt\n",
      "Error opening or reading input file:  1665.txt\n",
      "Error opening or reading input file:  1666.txt\n",
      "Error opening or reading input file:  1417.txt\n",
      "Error opening or reading input file:  1248.txt\n",
      "Error opening or reading input file:  1817.txt\n",
      "Error opening or reading input file:  1416.txt\n",
      "Error opening or reading input file:  1990.txt\n",
      "Error opening or reading input file:  1418.txt\n",
      "Error opening or reading input file:  1928.txt\n",
      "Error opening or reading input file:  1665.txt\n",
      "Error opening or reading input file:  1666.txt\n",
      "Error opening or reading input file:  1417.txt\n",
      "Error opening or reading input file:  1248.txt\n",
      "Error opening or reading input file:  1817.txt\n",
      "Error opening or reading input file:  1416.txt\n",
      "Error opening or reading input file:  1990.txt\n",
      "Error opening or reading input file:  1418.txt\n",
      "Error opening or reading input file:  1928.txt\n",
      "Error opening or reading input file:  1665.txt\n",
      "Error opening or reading input file:  1666.txt\n",
      "Error opening or reading input file:  1417.txt\n",
      "Error opening or reading input file:  1248.txt\n",
      "Error opening or reading input file:  1817.txt\n",
      "Error opening or reading input file:  1416.txt\n",
      "Error opening or reading input file:  1990.txt\n",
      "Error opening or reading input file:  1418.txt\n",
      "Error opening or reading input file:  1928.txt\n",
      "Error opening or reading input file:  1665.txt\n",
      "Error opening or reading input file:  1666.txt\n",
      "Error opening or reading input file:  1417.txt\n",
      "Error opening or reading input file:  1248.txt\n",
      "Error opening or reading input file:  1817.txt\n",
      "Error opening or reading input file:  1416.txt\n",
      "Error opening or reading input file:  1990.txt\n",
      "Error opening or reading input file:  1418.txt\n",
      "Error opening or reading input file:  1928.txt\n",
      "Error opening or reading input file:  1665.txt\n",
      "Error opening or reading input file:  1666.txt\n",
      "Error opening or reading input file:  1417.txt\n",
      "Error opening or reading input file:  1248.txt\n",
      "Error opening or reading input file:  1817.txt\n",
      "Error opening or reading input file:  1416.txt\n",
      "Error opening or reading input file:  1990.txt\n",
      "Error opening or reading input file:  1418.txt\n",
      "Error opening or reading input file:  1928.txt\n",
      "Error opening or reading input file:  1665.txt\n",
      "Error opening or reading input file:  1666.txt\n",
      "Error opening or reading input file:  1417.txt\n",
      "Error opening or reading input file:  1248.txt\n",
      "Error opening or reading input file:  1817.txt\n",
      "Error opening or reading input file:  1416.txt\n",
      "Error opening or reading input file:  1990.txt\n",
      "Error opening or reading input file:  1418.txt\n",
      "Error opening or reading input file:  1928.txt\n",
      "Error opening or reading input file:  1665.txt\n",
      "Error opening or reading input file:  1666.txt\n",
      "Error opening or reading input file:  1417.txt\n",
      "Error opening or reading input file:  1248.txt\n",
      "Error opening or reading input file:  1817.txt\n",
      "Error opening or reading input file:  1416.txt\n",
      "Error opening or reading input file:  1990.txt\n",
      "Error opening or reading input file:  1418.txt\n",
      "Error opening or reading input file:  1928.txt\n",
      "Error opening or reading input file:  1665.txt\n",
      "Error opening or reading input file:  1666.txt\n",
      "Error opening or reading input file:  1417.txt\n",
      "Error opening or reading input file:  1248.txt\n",
      "Error opening or reading input file:  1817.txt\n",
      "Error opening or reading input file:  1416.txt\n",
      "Error opening or reading input file:  1990.txt\n",
      "Error opening or reading input file:  1418.txt\n",
      "Error opening or reading input file:  1928.txt\n",
      "Error opening or reading input file:  1665.txt\n",
      "Error opening or reading input file:  1666.txt\n",
      "Error opening or reading input file:  1417.txt\n",
      "Error opening or reading input file:  1248.txt\n",
      "Error opening or reading input file:  1817.txt\n",
      "Error opening or reading input file:  1416.txt\n",
      "Error opening or reading input file:  1990.txt\n",
      "Error opening or reading input file:  1418.txt\n",
      "Error opening or reading input file:  1928.txt\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Number of clusters')"
      ]
     },
     "execution_count": 280,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "radius_arr = np.arange(0.1, 0.95, 0.05)\n",
    "cluster_numbers = []\n",
    "for radius in tqdm(radius_arr):\n",
    "    clusters = meanShift(\"docs/docs\", radius)\n",
    "    cluster_numbers.append(len(clusters))\n",
    "#show the plot\n",
    "plt.plot(radius_arr, cluster_numbers)\n",
    "plt.xlabel(\"Radius\")\n",
    "plt.ylabel(\"Number of clusters\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d2073316",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
